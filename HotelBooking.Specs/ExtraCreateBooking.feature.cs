// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HotelBooking.Specs
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExtraHotelBookingCreationFeature : object, Xunit.IClassFixture<ExtraHotelBookingCreationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Extra Hotel booking creation", "In order to: Book a room\r\nAs a: Customer\r\nI want: to book an available room for t" +
                "he selected dates\r\n\r\n  This feature tests the booking creation functionality und" +
                "er various conditions.\r\n  Arrange: Given, And\r\n  Act: When\r\n  Assert: Then", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ExtraCreateBooking.feature"
#line hidden
        
        public ExtraHotelBookingCreationFeature(ExtraHotelBookingCreationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A room is available and dates are valid")]
        [Xunit.TraitAttribute("FeatureTitle", "Extra Hotel booking creation")]
        [Xunit.TraitAttribute("Description", "A room is available and dates are valid")]
        public async System.Threading.Tasks.Task ARoomIsAvailableAndDatesAreValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A room is available and dates are valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
  await testRunner.GivenAsync("a hotel with 3 available rooms", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
  await testRunner.AndAsync("the booking start date is \"1\" and the end date is \"2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
  await testRunner.WhenAsync("a user books a room", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
  await testRunner.ThenAsync("the booking should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 29
  await testRunner.AndAsync("the assigned room ID should be between 1 and 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No rooms are available and dates are valid")]
        [Xunit.TraitAttribute("FeatureTitle", "Extra Hotel booking creation")]
        [Xunit.TraitAttribute("Description", "No rooms are available and dates are valid")]
        public async System.Threading.Tasks.Task NoRoomsAreAvailableAndDatesAreValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No rooms are available and dates are valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
  await testRunner.GivenAsync("a hotel with 0 available rooms", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
  await testRunner.AndAsync("the booking start date is \"1\" and the end date is \"2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
  await testRunner.WhenAsync("a user books a room", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
  await testRunner.ThenAsync("the booking should not be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Booking fails when Start date is today or earlier")]
        [Xunit.TraitAttribute("FeatureTitle", "Extra Hotel booking creation")]
        [Xunit.TraitAttribute("Description", "Booking fails when Start date is today or earlier")]
        public async System.Threading.Tasks.Task BookingFailsWhenStartDateIsTodayOrEarlier()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Booking fails when Start date is today or earlier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 40
  await testRunner.GivenAsync("a hotel with 3 available rooms", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
  await testRunner.AndAsync("the booking start date is \"0\" and the end date is \"2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
  await testRunner.WhenAsync("a user books a room", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
  await testRunner.ThenAsync("an exception should be thrown indicating The start date cannot be in the past or " +
                        "later than the end date", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User books at the earliest start date")]
        [Xunit.TraitAttribute("FeatureTitle", "Extra Hotel booking creation")]
        [Xunit.TraitAttribute("Description", "User books at the earliest start date")]
        public async System.Threading.Tasks.Task UserBooksAtTheEarliestStartDate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User books at the earliest start date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 47
  await testRunner.GivenAsync("a hotel with 3 available rooms", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 48
  await testRunner.AndAsync("the booking start date is \"1\" and the end date is \"2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
  await testRunner.WhenAsync("a user books a room", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
  await testRunner.ThenAsync("the booking should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
  await testRunner.AndAsync("the assigned room ID should be between 1 and 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User switches start date and end date around")]
        [Xunit.TraitAttribute("FeatureTitle", "Extra Hotel booking creation")]
        [Xunit.TraitAttribute("Description", "User switches start date and end date around")]
        public async System.Threading.Tasks.Task UserSwitchesStartDateAndEndDateAround()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User switches start date and end date around", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 55
  await testRunner.GivenAsync("a hotel with 3 available rooms", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 56
  await testRunner.AndAsync("the booking start date is \"2\" and the end date is \"1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
  await testRunner.WhenAsync("a user books a room", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
  await testRunner.ThenAsync("the booking should not be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 59
  await testRunner.AndAsync("an exception should be thrown indicating The start date cannot be in the past or " +
                        "later than the end date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User books a room with the same start date and end date.")]
        [Xunit.TraitAttribute("FeatureTitle", "Extra Hotel booking creation")]
        [Xunit.TraitAttribute("Description", "User books a room with the same start date and end date.")]
        public async System.Threading.Tasks.Task UserBooksARoomWithTheSameStartDateAndEndDate_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User books a room with the same start date and end date.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 63
  await testRunner.GivenAsync("a hotel with 3 available rooms", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 64
  await testRunner.AndAsync("the booking start date is \"1\" and the end date is \"1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
  await testRunner.WhenAsync("a user books a room", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
  await testRunner.ThenAsync("the booking should not be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 67
  await testRunner.AndAsync("an exception should be thrown indicating The start date cannot be in the past or " +
                        "later than the end date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ExtraHotelBookingCreationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ExtraHotelBookingCreationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
